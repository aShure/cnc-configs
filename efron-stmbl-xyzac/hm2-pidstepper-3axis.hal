# kinematics
loadrt [KINS]KINEMATICS
#autoconverted  trivkins

loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=32
loadrt hostmot2
loadrt pid num_chan=4
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)
setp hm2_[HOSTMOT2](BOARD).0.watchdog.timeout_ns 25000000



# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
addf pid.0.do-pid-calcs                   servo-thread
addf pid.1.do-pid-calcs                   servo-thread
addf pid.2.do-pid-calcs                   servo-thread
addf pid.3.do-pid-calcs                   servo-thread
addf hm2_[HOSTMOT2](BOARD).0.write        servo-thread
#addf hm2_[HOSTMOT2](BOARD).0.pet_watchdog servo-thread




# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# X [0] Axis
# ################

####
####
#### STMBL servo connection:
####
####

#net xenable joint.0.amp-enable-out => hm2_[HOSTMOT2](BOARD).0.stbl.0.0.enable
#net xfault hm2_[HOSTMOT2](BOARD).0.stbl.0.0.fault => joint.0.amp-fault-in
#net xposcmd joint.0.motor-pos-cmd => hm2_[HOSTMOT2](BOARD).0.stbl.0.0.pos_cmd
#net xposfb hm2_[HOSTMOT2](BOARD).0.stbl.0.0.pos_fb => joint.0.motor-pos-fb


####
####
#### step/dir output:
####
####

#invert direction output 7i80:
setp hm2_[HOSTMOT2](BOARD).0.gpio.002.invert_output true

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= joint.0.amp-enable-out
net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.00.enable pid.0.enable


# position command and feedback
net emcmot.00.pos-cmd joint.0.motor-pos-cmd => pid.0.command
net emcmot.00.vel-cmd joint.0.vel-cmd => pid.0.command-deriv
net motor.00.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-fb joint.0.motor-pos-fb pid.0.feedback
net motor.00.command pid.0.output hm2_[HOSTMOT2](BOARD).0.stepgen.00.velocity-cmd
setp pid.0.error-previous-target true


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirsetup        [JOINT_0]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirhold         [JOINT_0]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.steplen         [JOINT_0]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.stepspace       [JOINT_0]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-scale  [JOINT_0]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxvel          [JOINT_0]MAX_VELOCITY
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxaccel        [JOINT_0]STEPGEN_MAXACCEL

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.step_type       0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.control-type    1

# set PID loop gains from inifile
setp pid.0.Pgain [JOINT_0]P
setp pid.0.Igain [JOINT_0]I
setp pid.0.Dgain [JOINT_0]D
setp pid.0.bias [JOINT_0]BIAS
setp pid.0.FF0 [JOINT_0]FF0
setp pid.0.FF1 [JOINT_0]FF1
setp pid.0.FF2 [JOINT_0]FF2
setp pid.0.deadband [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAX_OUTPUT
setp pid.0.maxerror [JOINT_0]MAX_ERROR


# ################
# Y [1] Axis
# ################
setp hm2_[HOSTMOT2](BOARD).0.gpio.006.invert_output true

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= joint.1.amp-enable-out
net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.01.enable pid.1.enable

# position command and feedback
net emcmot.01.pos-cmd joint.1.motor-pos-cmd => pid.1.command
net emcmot.01.vel-cmd joint.1.vel-cmd => pid.1.command-deriv
net motor.01.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-fb joint.1.motor-pos-fb pid.1.feedback
net motor.01.command pid.1.output hm2_[HOSTMOT2](BOARD).0.stepgen.01.velocity-cmd
setp pid.1.error-previous-target true

# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirhold         [JOINT_1]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.steplen         [JOINT_1]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.stepspace       [JOINT_1]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-scale  [JOINT_1]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxvel          [JOINT_1]MAX_VELOCITY
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxaccel        [JOINT_1]STEPGEN_MAXACCEL

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.step_type       0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.control-type    1

# set PID loop gains from inifile
setp pid.1.Pgain [JOINT_1]P
setp pid.1.Igain [JOINT_1]I
setp pid.1.Dgain [JOINT_1]D
setp pid.1.bias [JOINT_1]BIAS
setp pid.1.FF0 [JOINT_1]FF0
setp pid.1.FF1 [JOINT_1]FF1
setp pid.1.FF2 [JOINT_1]FF2
setp pid.1.deadband [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAX_OUTPUT
setp pid.1.maxerror [JOINT_1]MAX_ERROR


# ################
# Z [2] Axis
# ################

#invert direction output:
#for 7i80:
setp hm2_[HOSTMOT2](BOARD).0.gpio.009.invert_output true

#for 7i92:
#setp hm2_[HOSTMOT2](BOARD).0.gpio.010.invert_output true

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE

net emcmot.02.enable <= joint.2.amp-enable-out
net emcmot.02.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.02.enable pid.2.enable



# position command and feedback
net emcmot.02.pos-cmd joint.2.motor-pos-cmd => pid.2.command
net emcmot.02.vel-cmd joint.2.vel-cmd => pid.2.command-deriv
net motor.02.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-fb joint.2.motor-pos-fb pid.2.feedback
net motor.02.command pid.2.output hm2_[HOSTMOT2](BOARD).0.stepgen.02.velocity-cmd
setp pid.2.error-previous-target true


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirsetup        [JOINT_2]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirhold         [JOINT_2]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.steplen         [JOINT_2]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.stepspace       [JOINT_2]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-scale  [JOINT_2]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxvel          [JOINT_2]MAX_VELOCITY
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxaccel        [JOINT_2]STEPGEN_MAXACCEL

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.step_type       0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.control-type    1

# set PID loop gains from inifile
setp pid.2.Pgain [JOINT_2]P
setp pid.2.Igain [JOINT_2]I
setp pid.2.Dgain [JOINT_2]D
setp pid.2.bias [JOINT_2]BIAS
setp pid.2.FF0 [JOINT_2]FF0
setp pid.2.FF1 [JOINT_2]FF1
setp pid.2.FF2 [JOINT_2]FF2
setp pid.2.deadband [JOINT_2]DEADBAND
setp pid.2.maxoutput [JOINT_2]MAX_OUTPUT
setp pid.2.maxerror [JOINT_2]MAX_ERROR

# ################
# A [3] Axis
# ################

#net aenable joint.3.amp-enable-out => hm2_[HOSTMOT2](BOARD).0.stbl.0.4.enable
#net afault hm2_[HOSTMOT2](BOARD).0.stbl.0.4.fault => joint.3.amp-fault-in
#net aposcmd joint.3.motor-pos-cmd => hm2_[HOSTMOT2](BOARD).0.stbl.0.4.pos_cmd
#net aposfb hm2_[HOSTMOT2](BOARD).0.stbl.0.4.pos_fb => joint.3.motor-pos-fb

#net max-home-a     <=  hm2_[HOSTMOT2](BOARD).0.stbl.0.4.input_pins-00
#net max-home-a => joint.3.home-sw-in


# ################
# C [5] Axis
# ################


#net cenable joint.5.amp-enable-out => hm2_[HOSTMOT2](BOARD).0.stbl.0.5.enable
#net cfault hm2_[HOSTMOT2](BOARD).0.stbl.0.5.fault => joint.5.amp-fault-in
#net cposcmd joint.5.motor-pos-cmd => hm2_[HOSTMOT2](BOARD).0.stbl.0.5.pos_cmd
#net cposfb hm2_[HOSTMOT2](BOARD).0.stbl.0.5.pos_fb => joint.5.motor-pos-fb

#net max-home-c     <=  hm2_[HOSTMOT2](BOARD).0.stbl.0.5.input_pins-00
#net max-home-c => joint.5.home-sw-in


# ##################################################
# Standard I/O Block - EStop, Etc
# ##################################################

#  ---HALUI signals---

#  ---coolant signals---

net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---
net probe-in     =>  motion.probe-input

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

# create signals for tool loading loopback

#net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
#net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
